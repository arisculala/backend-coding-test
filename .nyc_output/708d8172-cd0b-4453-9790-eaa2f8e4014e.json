{"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/schemas.js":{"path":"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/schemas.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":22,"column":2}},"1":{"start":{"line":4,"column":34},"end":{"line":17,"column":5}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":34}},"3":{"start":{"line":21,"column":4},"end":{"line":21,"column":14}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":17},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":25},"end":{"line":22,"column":1}},"line":3}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9460c5ac09d7b41627f0f9b00a85daafa217885f","contentHash":"ac3e1052163bd1f346a02f4e533456d19f54bcf7df75036ea61ad189373b9402"},"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/app.ts":{"path":"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/app.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":63}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":13},"end":{"line":8,"column":45}},"6":{"start":{"line":9,"column":20},"end":{"line":9,"column":42}},"7":{"start":{"line":11,"column":16},"end":{"line":11,"column":34}},"8":{"start":{"line":12,"column":10},"end":{"line":12,"column":29}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":26}},"10":{"start":{"line":14,"column":17},"end":{"line":14,"column":37}},"11":{"start":{"line":15,"column":23},"end":{"line":23,"column":1}},"12":{"start":{"line":22,"column":50},"end":{"line":22,"column":123}},"13":{"start":{"line":24,"column":13},"end":{"line":24,"column":53}},"14":{"start":{"line":25,"column":0},"end":{"line":142,"column":3}},"15":{"start":{"line":26,"column":4},"end":{"line":26,"column":76}},"16":{"start":{"line":26,"column":45},"end":{"line":26,"column":72}},"17":{"start":{"line":27,"column":4},"end":{"line":96,"column":7}},"18":{"start":{"line":28,"column":8},"end":{"line":28,"column":44}},"19":{"start":{"line":29,"column":28},"end":{"line":29,"column":54}},"20":{"start":{"line":30,"column":29},"end":{"line":30,"column":56}},"21":{"start":{"line":31,"column":26},"end":{"line":31,"column":50}},"22":{"start":{"line":32,"column":27},"end":{"line":32,"column":52}},"23":{"start":{"line":33,"column":24},"end":{"line":33,"column":43}},"24":{"start":{"line":34,"column":25},"end":{"line":34,"column":45}},"25":{"start":{"line":35,"column":28},"end":{"line":35,"column":51}},"26":{"start":{"line":36,"column":8},"end":{"line":43,"column":9}},"27":{"start":{"line":37,"column":12},"end":{"line":37,"column":70}},"28":{"start":{"line":38,"column":12},"end":{"line":38,"column":64}},"29":{"start":{"line":39,"column":12},"end":{"line":42,"column":15}},"30":{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},"31":{"start":{"line":45,"column":12},"end":{"line":45,"column":68}},"32":{"start":{"line":46,"column":12},"end":{"line":46,"column":64}},"33":{"start":{"line":47,"column":12},"end":{"line":50,"column":15}},"34":{"start":{"line":52,"column":8},"end":{"line":59,"column":9}},"35":{"start":{"line":53,"column":12},"end":{"line":53,"column":73}},"36":{"start":{"line":54,"column":12},"end":{"line":54,"column":64}},"37":{"start":{"line":55,"column":12},"end":{"line":58,"column":15}},"38":{"start":{"line":60,"column":8},"end":{"line":67,"column":9}},"39":{"start":{"line":61,"column":12},"end":{"line":61,"column":74}},"40":{"start":{"line":62,"column":12},"end":{"line":62,"column":64}},"41":{"start":{"line":63,"column":12},"end":{"line":66,"column":15}},"42":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"43":{"start":{"line":69,"column":12},"end":{"line":69,"column":77}},"44":{"start":{"line":70,"column":12},"end":{"line":70,"column":64}},"45":{"start":{"line":71,"column":12},"end":{"line":74,"column":15}},"46":{"start":{"line":76,"column":21},"end":{"line":76,"column":167}},"47":{"start":{"line":77,"column":8},"end":{"line":95,"column":11}},"48":{"start":{"line":78,"column":12},"end":{"line":84,"column":13}},"49":{"start":{"line":79,"column":16},"end":{"line":79,"column":78}},"50":{"start":{"line":80,"column":16},"end":{"line":83,"column":19}},"51":{"start":{"line":85,"column":12},"end":{"line":94,"column":15}},"52":{"start":{"line":86,"column":16},"end":{"line":92,"column":17}},"53":{"start":{"line":87,"column":20},"end":{"line":87,"column":90}},"54":{"start":{"line":88,"column":20},"end":{"line":91,"column":23}},"55":{"start":{"line":93,"column":16},"end":{"line":93,"column":31}},"56":{"start":{"line":97,"column":4},"end":{"line":118,"column":7}},"57":{"start":{"line":98,"column":8},"end":{"line":98,"column":43}},"58":{"start":{"line":99,"column":8},"end":{"line":117,"column":11}},"59":{"start":{"line":100,"column":12},"end":{"line":107,"column":13}},"60":{"start":{"line":101,"column":16},"end":{"line":101,"column":77}},"61":{"start":{"line":102,"column":16},"end":{"line":102,"column":68}},"62":{"start":{"line":103,"column":16},"end":{"line":106,"column":19}},"63":{"start":{"line":108,"column":12},"end":{"line":115,"column":13}},"64":{"start":{"line":109,"column":16},"end":{"line":109,"column":57}},"65":{"start":{"line":110,"column":16},"end":{"line":110,"column":68}},"66":{"start":{"line":111,"column":16},"end":{"line":114,"column":19}},"67":{"start":{"line":116,"column":12},"end":{"line":116,"column":27}},"68":{"start":{"line":119,"column":4},"end":{"line":140,"column":7}},"69":{"start":{"line":120,"column":8},"end":{"line":120,"column":47}},"70":{"start":{"line":121,"column":8},"end":{"line":139,"column":11}},"71":{"start":{"line":122,"column":12},"end":{"line":129,"column":13}},"72":{"start":{"line":123,"column":16},"end":{"line":123,"column":93}},"73":{"start":{"line":124,"column":16},"end":{"line":124,"column":68}},"74":{"start":{"line":125,"column":16},"end":{"line":128,"column":19}},"75":{"start":{"line":130,"column":12},"end":{"line":137,"column":13}},"76":{"start":{"line":131,"column":16},"end":{"line":131,"column":103}},"77":{"start":{"line":132,"column":16},"end":{"line":132,"column":68}},"78":{"start":{"line":133,"column":16},"end":{"line":136,"column":19}},"79":{"start":{"line":138,"column":12},"end":{"line":138,"column":27}},"80":{"start":{"line":141,"column":4},"end":{"line":141,"column":15}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":32},"end":{"line":22,"column":33}},"loc":{"start":{"line":22,"column":48},"end":{"line":22,"column":125}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":19},"end":{"line":25,"column":20}},"loc":{"start":{"line":25,"column":33},"end":{"line":142,"column":1}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":23},"end":{"line":26,"column":24}},"loc":{"start":{"line":26,"column":43},"end":{"line":26,"column":74}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":35},"end":{"line":27,"column":36}},"loc":{"start":{"line":27,"column":55},"end":{"line":96,"column":5}},"line":27},"5":{"name":"(anonymous_5)","decl":{"start":{"line":77,"column":149},"end":{"line":77,"column":150}},"loc":{"start":{"line":77,"column":164},"end":{"line":95,"column":9}},"line":77},"6":{"name":"(anonymous_6)","decl":{"start":{"line":85,"column":72},"end":{"line":85,"column":73}},"loc":{"start":{"line":85,"column":93},"end":{"line":94,"column":13}},"line":85},"7":{"name":"(anonymous_7)","decl":{"start":{"line":97,"column":22},"end":{"line":97,"column":23}},"loc":{"start":{"line":97,"column":42},"end":{"line":118,"column":5}},"line":97},"8":{"name":"(anonymous_8)","decl":{"start":{"line":99,"column":38},"end":{"line":99,"column":39}},"loc":{"start":{"line":99,"column":59},"end":{"line":117,"column":9}},"line":99},"9":{"name":"(anonymous_9)","decl":{"start":{"line":119,"column":26},"end":{"line":119,"column":27}},"loc":{"start":{"line":119,"column":46},"end":{"line":140,"column":5}},"line":119},"10":{"name":"(anonymous_10)","decl":{"start":{"line":121,"column":75},"end":{"line":121,"column":76}},"loc":{"start":{"line":121,"column":96},"end":{"line":139,"column":9}},"line":121}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":36,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":43,"column":9}},{"start":{"line":36,"column":8},"end":{"line":43,"column":9}}],"line":36},"4":{"loc":{"start":{"line":36,"column":12},"end":{"line":36,"column":102}},"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":31}},{"start":{"line":36,"column":35},"end":{"line":36,"column":53}},{"start":{"line":36,"column":57},"end":{"line":36,"column":78}},{"start":{"line":36,"column":82},"end":{"line":36,"column":102}}],"line":36},"5":{"loc":{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},{"start":{"line":44,"column":8},"end":{"line":51,"column":9}}],"line":44},"6":{"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":94}},"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":29}},{"start":{"line":44,"column":33},"end":{"line":44,"column":49}},{"start":{"line":44,"column":53},"end":{"line":44,"column":72}},{"start":{"line":44,"column":76},"end":{"line":44,"column":94}}],"line":44},"7":{"loc":{"start":{"line":52,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":59,"column":9}},{"start":{"line":52,"column":8},"end":{"line":59,"column":9}}],"line":52},"8":{"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":65}},"type":"binary-expr","locations":[{"start":{"line":52,"column":12},"end":{"line":52,"column":41}},{"start":{"line":52,"column":45},"end":{"line":52,"column":65}}],"line":52},"9":{"loc":{"start":{"line":60,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":67,"column":9}},{"start":{"line":60,"column":8},"end":{"line":67,"column":9}}],"line":60},"10":{"loc":{"start":{"line":60,"column":12},"end":{"line":60,"column":67}},"type":"binary-expr","locations":[{"start":{"line":60,"column":12},"end":{"line":60,"column":42}},{"start":{"line":60,"column":46},"end":{"line":60,"column":67}}],"line":60},"11":{"loc":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},{"start":{"line":68,"column":8},"end":{"line":75,"column":9}}],"line":68},"12":{"loc":{"start":{"line":68,"column":12},"end":{"line":68,"column":73}},"type":"binary-expr","locations":[{"start":{"line":68,"column":12},"end":{"line":68,"column":45}},{"start":{"line":68,"column":49},"end":{"line":68,"column":73}}],"line":68},"13":{"loc":{"start":{"line":78,"column":12},"end":{"line":84,"column":13}},"type":"if","locations":[{"start":{"line":78,"column":12},"end":{"line":84,"column":13}},{"start":{"line":78,"column":12},"end":{"line":84,"column":13}}],"line":78},"14":{"loc":{"start":{"line":86,"column":16},"end":{"line":92,"column":17}},"type":"if","locations":[{"start":{"line":86,"column":16},"end":{"line":92,"column":17}},{"start":{"line":86,"column":16},"end":{"line":92,"column":17}}],"line":86},"15":{"loc":{"start":{"line":100,"column":12},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":107,"column":13}},{"start":{"line":100,"column":12},"end":{"line":107,"column":13}}],"line":100},"16":{"loc":{"start":{"line":108,"column":12},"end":{"line":115,"column":13}},"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":115,"column":13}},{"start":{"line":108,"column":12},"end":{"line":115,"column":13}}],"line":108},"17":{"loc":{"start":{"line":122,"column":12},"end":{"line":129,"column":13}},"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":129,"column":13}},{"start":{"line":122,"column":12},"end":{"line":129,"column":13}}],"line":122},"18":{"loc":{"start":{"line":130,"column":12},"end":{"line":137,"column":13}},"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":137,"column":13}},{"start":{"line":130,"column":12},"end":{"line":137,"column":13}}],"line":130}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":15,"13":1,"14":1,"15":1,"16":0,"17":1,"18":6,"19":6,"20":6,"21":6,"22":6,"23":6,"24":6,"25":6,"26":6,"27":1,"28":1,"29":1,"30":5,"31":1,"32":1,"33":1,"34":4,"35":1,"36":1,"37":1,"38":3,"39":1,"40":1,"41":1,"42":2,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":0,"50":0,"51":1,"52":1,"53":0,"54":0,"55":1,"56":1,"57":2,"58":2,"59":2,"60":1,"61":1,"62":1,"63":1,"64":0,"65":0,"66":0,"67":1,"68":1,"69":1,"70":1,"71":1,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":1,"80":1},"f":{"0":3,"1":15,"2":1,"3":0,"4":6,"5":1,"6":1,"7":2,"8":2,"9":1,"10":1},"b":{"0":[1,1,1],"1":[1,2],"2":[3,3],"3":[1,5],"4":[6,6,5,5],"5":[1,4],"6":[5,5,4,4],"7":[1,3],"8":[4,4],"9":[1,2],"10":[3,3],"11":[1,1],"12":[2,2],"13":[0,1],"14":[0,1],"15":[1,1],"16":[0,1],"17":[0,1],"18":[0,1]},"inputSourceMap":{"version":3,"file":"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/app.ts","sources":["/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/app.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\nimport constants from './utils/constants'\n\nimport express from 'express'\n\nimport cors from 'cors'\n\nimport { json } from 'body-parser'\n\n// Winston logger\nimport { transports as _transports, format as _format, createLogger } from 'winston'\nimport sqlite3 from 'sqlite3'\nconst app = express()\napp.use(cors())\nconst jsonParser = json()\nconst logConfiguration = {\n  transports: [\n    new _transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new _transports.File({ filename: 'logs/info.log', level: 'info' })\n  ],\n  format: _format.combine(\n    _format.timestamp({\n      format: 'MM-DD-YYYY HH:mm:ss'\n    }),\n    _format.printf(info => `[${info.level}]: ${[info.timestamp]}: ${info.message}`)\n  )\n}\nconst logger = createLogger(logConfiguration)\n\nexport default (db: sqlite3.Database) => {\n  app.get('/health', (req, res) => res.send('Healthy'))\n\n  app.post('/rides', jsonParser, (req, res) => {\n    logger.info('Calling post: /rides')\n    const startLatitude = Number(req.body.start_lat)\n    const startLongitude = Number(req.body.start_long)\n    const endLatitude = Number(req.body.end_lat)\n    const endLongitude = Number(req.body.end_long)\n    const riderName = req.body.rider_name\n    const driverName = req.body.driver_name\n    const driverVehicle = req.body.driver_vehicle\n\n    if (startLatitude < -90 || startLatitude > 90 || startLongitude < -180 || startLongitude > 180) {\n      logger.error(constants.START_LAT_LON_ERROR_MSG)\n      res.status(constants.HTTP_ERROR_CODE_500)\n      return res.send({\n        error_code: constants.VALIDATION_ERROR,\n        message: constants.START_LAT_LON_ERROR_MSG\n      })\n    }\n\n    if (endLatitude < -90 || endLatitude > 90 || endLongitude < -180 || endLongitude > 180) {\n      logger.error(constants.END_LAT_LON_ERROR_MSG)\n      res.status(constants.HTTP_ERROR_CODE_500)\n      return res.send({\n        error_code: constants.VALIDATION_ERROR,\n        message: constants.END_LAT_LON_ERROR_MSG\n      })\n    }\n\n    if (typeof riderName !== 'string' || riderName.length < 1) {\n      logger.error(constants.RIDER_NAME_EMPTY_ERROR_MSG)\n      res.status(constants.HTTP_ERROR_CODE_500)\n      return res.send({\n        error_code: constants.VALIDATION_ERROR,\n        message: constants.RIDER_NAME_EMPTY_ERROR_MSG\n      })\n    }\n\n    if (typeof driverName !== 'string' || driverName.length < 1) {\n      logger.error(constants.DRIVER_NAME_EMPTY_ERROR_MSG)\n      res.status(constants.HTTP_ERROR_CODE_500)\n      return res.send({\n        error_code: constants.VALIDATION_ERROR,\n        message: constants.DRIVER_NAME_EMPTY_ERROR_MSG\n      })\n    }\n\n    if (typeof driverVehicle !== 'string' || driverVehicle.length < 1) {\n      logger.error(constants.DRIVER_VEHICLE_EMPTY_ERROR_MSG)\n      res.status(constants.HTTP_ERROR_CODE_500)\n      return res.send({\n        error_code: constants.VALIDATION_ERROR,\n        message: constants.DRIVER_VEHICLE_EMPTY_ERROR_MSG\n      })\n    }\n\n    const values = [req.body.start_lat, req.body.start_long, req.body.end_lat, req.body.end_long, req.body.rider_name, req.body.driver_name, req.body.driver_vehicle]\n\n    db.run('INSERT INTO Rides(startLat, startLong, endLat, endLong, riderName, driverName, driverVehicle) VALUES (?, ?, ?, ?, ?, ?, ?)', values, function (err) {\n      if (err) {\n        logger.error('Error encountered inserting ride details', err)\n        return res.send({\n          error_code: constants.SERVER_ERROR,\n          message: constants.UNKNOWN_ERROR\n        })\n      }\n\n      db.all('SELECT * FROM Rides WHERE rideID = ?', this.lastID, function (err, rows) {\n        if (err) {\n          logger.error('Error encountered getting the newly created ride', err)\n          return res.send({\n            error_code: constants.SERVER_ERROR,\n            message: constants.UNKNOWN_ERROR\n          })\n        }\n\n        res.send(rows)\n      })\n    })\n  })\n\n  app.get('/rides', (req, res) => {\n    logger.info('Calling get: /rides')\n    db.all('SELECT * FROM Rides', function (err, rows) {\n      if (err) {\n        logger.error('Error encountered getting list of rides', err)\n        res.status(constants.HTTP_ERROR_CODE_500)\n        return res.send({\n          error_code: constants.SERVER_ERROR,\n          message: constants.UNKNOWN_ERROR\n        })\n      }\n\n      if (rows.length === 0) {\n        logger.error('Could not find any rides')\n        res.status(constants.HTTP_ERROR_CODE_404)\n        return res.send({\n          error_code: constants.RIDES_NOT_FOUND_ERROR,\n          message: 'Could not find any rides'\n        })\n      }\n\n      res.send(rows)\n    })\n  })\n\n  app.get('/rides/:id', (req, res) => {\n    logger.info('Calling get: /ride/{id}')\n    db.all(`SELECT * FROM Rides WHERE rideID='${req.params.id}'`, function (err, rows) {\n      if (err) {\n        logger.error('Error encountered getting the specified ride id details', err)\n        res.status(constants.HTTP_ERROR_CODE_500)\n        return res.send({\n          error_code: constants.SERVER_ERROR,\n          message: 'Unknown error'\n        })\n      }\n\n      if (rows.length === 0) {\n        logger.error(`${constants.RIDE_ID_NOT_FOUND_ERROR} [${req.params.id}]`)\n        res.status(constants.HTTP_ERROR_CODE_404)\n        return res.send({\n          error_code: constants.RIDE_NOT_FOUND_ERROR,\n          message: `${constants.RIDE_ID_NOT_FOUND_ERROR} [${req.params.id}]`\n        })\n      }\n\n      res.send(rows)\n    })\n  })\n\n  return app\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7814d7949e8a10cb9994b355b3c12d85328fc048","contentHash":"17a82c5ab166255d9bd17fb1fa31a547931663e6796313a4466e3142224533a6"},"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/utils/constants.ts":{"path":"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/utils/constants.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":17,"column":1}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":43}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/utils/constants.ts","sources":["/Users/arisculala/dev/test/latest-working-copy-backend-coding-test/backend-coding-test-master/src/utils/constants.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,IAAM,SAAS,GAAG;IAChB,mBAAmB,EAAE,GAAG;IACxB,mBAAmB,EAAE,GAAG;IACxB,gBAAgB,EAAE,kBAAkB;IACpC,YAAY,EAAE,cAAc;IAC5B,aAAa,EAAE,eAAe;IAC9B,uBAAuB,EAAE,4FAA4F;IACrH,qBAAqB,EAAE,0FAA0F;IACjH,0BAA0B,EAAE,uCAAuC;IACnE,2BAA2B,EAAE,wCAAwC;IACrE,8BAA8B,EAAE,2CAA2C;IAC3E,qBAAqB,EAAE,uBAAuB;IAC9C,oBAAoB,EAAE,sBAAsB;IAC5C,uBAAuB,EAAE,gDAAgD;CAC1E,CAAA;AACD,kBAAe,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA","sourcesContent":["'use strict'\n\nconst constants = {\n  HTTP_ERROR_CODE_500: 500,\n  HTTP_ERROR_CODE_404: 404,\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  SERVER_ERROR: 'SERVER_ERROR',\n  UNKNOWN_ERROR: 'Unknown error',\n  START_LAT_LON_ERROR_MSG: 'Start latitude and longitude must be between -90 - 90 and -180 to 180 degrees respectively',\n  END_LAT_LON_ERROR_MSG: 'End latitude and longitude must be between -90 - 90 and -180 to 180 degrees respectively',\n  RIDER_NAME_EMPTY_ERROR_MSG: 'Rider name must be a non empty string',\n  DRIVER_NAME_EMPTY_ERROR_MSG: 'Driver name must be a non empty string',\n  DRIVER_VEHICLE_EMPTY_ERROR_MSG: 'Driver vehicle must be a non empty string',\n  RIDES_NOT_FOUND_ERROR: 'RIDES_NOT_FOUND_ERROR',\n  RIDE_NOT_FOUND_ERROR: 'RIDE_NOT_FOUND_ERROR',\n  RIDE_ID_NOT_FOUND_ERROR: 'Could not find any rides with the specified id'\n}\nexport default Object.freeze(constants)\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f894b5f8f6cefd2dd77f4bda48ec724a418c4af3","contentHash":"4033d5677dfd6aa23e24a252a16b6f192b10bb74047c7818103b6c342cc3deab"}}